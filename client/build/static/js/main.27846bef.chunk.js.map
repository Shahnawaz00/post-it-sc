{"version":3,"sources":["features/addPage/addPageClassSlice.js","features/addPage/addPageClassDispatchInitSlice.js","features/posts/deletePostSlice.js","features/header/Header.js","features/posts/postsSlice.js","features/posts/PostsList.js","features/addPage/AddPost.js","App.js","app/store.js","index.js"],"names":["addPageClassSlice","createSlice","name","initialState","value","reducers","addPageClassChanged","state","action","payload","actions","viewAddPageSlice","addPageClassDispatched","deletePostSlice","deletePostDispatched","Header","dispatch","useDispatch","addPageClass","useSelector","deletePost","react_default","a","createElement","className","c","onClick","index_esm","size","ai_index_esm","postsSlice","id","description","addNewPost","console","log","push","deletePostConfirm","filter","post","find","PostsList","posts","_useState","useState","_useState2","Object","slicedToArray","checkedArray","setCheckedArray","checkBoxClick","e","target","checked","prevState","concat","toConsumableArray","length","alert","map","key","type","AddPost","viewAddPage","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","setName","_useState3","_useState4","setDescription","htmlFor","placeholder","onChange","cols","rows","nanoid","App","header_Header","addPage_AddPost","posts_PostsList","configureStore","reducer","postsReducer","viewAddPageReducer","addPageClassReducer","deletePostReducer","ReactDOM","createRoot","document","getElementById","render","es","store","src_App"],"mappings":"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","file":"static/js/main.27846bef.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    value: 'closeAddPage'\n} ;\n\nconst addPageClassSlice = createSlice({\n    name: 'addPageClass',\n    initialState,\n    reducers: {\n        addPageClassChanged(state, action) {\n            state.value = action.payload\n          }\n    }\n})\n\nexport const {addPageClassChanged} = addPageClassSlice.actions\n\nexport default addPageClassSlice.reducer\n\n\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    value: false\n} ;\n\nconst viewAddPageSlice = createSlice({\n    name: 'viewAddPage',\n    initialState,\n    reducers: {\n        addPageClassDispatched(state, action) {\n            state.value = action.payload\n        }\n    }\n})\n\nexport const {addPageClassDispatched} = viewAddPageSlice.actions\n\nexport default viewAddPageSlice.reducer\n\n\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    value: false\n} ;\n\nconst deletePostSlice = createSlice({\n    name: 'deletePost',\n    initialState,\n    reducers: {\n        deletePostDispatched(state, action) {\n            state.value = action.payload\n        }\n    }\n})\n\nexport const {deletePostDispatched} = deletePostSlice.actions\n\nexport default deletePostSlice.reducer\n\n\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {GrAdd} from 'react-icons/gr'\nimport {AiFillDelete} from 'react-icons/ai'\nimport {addPageClassChanged} from '../addPage/addPageClassSlice';\nimport { addPageClassDispatched } from '../addPage/addPageClassDispatchInitSlice';\nimport { deletePostDispatched } from '../posts/deletePostSlice';\n\nconst Header = () => {\n\n  const dispatch = useDispatch();\n  //   add page dispatch \n  const addPageClass = useSelector(state => state.addPageClass);\n  const openAddPage = () => {\n    if (addPageClass.value !== 'openAddPage') {\n        dispatch(\n            addPageClassDispatched({\n                value: true\n            })\n        )\n        dispatch(\n            addPageClassChanged({\n                value: 'openAddPage'\n            })\n        )\n    }\n  }\n   //   delete page dispatch \n   const deletePost = useSelector(state => state.deletePost)\n   const openDeletePost = () => {\n    if (deletePost.value !== true ) {\n        dispatch (\n            deletePostDispatched(true)\n        )\n    }\n   }\n  \n\n\n  return (\n    <div className='headerMain' >\n        <header>\n            <h1 className='headerTitle' >\n                POST-IT \n            </h1>\n        </header>\n        {/* buttons */}\n        <div c >\n            <button className='addButton' onClick={openAddPage} >\n                <GrAdd size={24} className='addIcon'/>\n            </button>\n            <button className='deleteButton' onClick={openDeletePost}> \n                <AiFillDelete size={24} />\n            </button>\n\n\n\n              \n\n        </div>\n    </div>\n  )\n}\n\nexport default Header","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = [\n  { id: '1', name: 'First Post!', description: 'Hello!' },\n  { id: '2', name: ' hello Second Post', description: 'More text' },\n  { id: '3', name: ' hello Second Post', description: 'More text' },\n  { id: '4', name: 'First Post!', description: 'Hello!' },\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addNewPost(state, action) {\n      console.log(state.push(action.payload))\n    },\n    deletePostConfirm(state, action) {\n      console.log(action.payload)\n      return state.filter(\n            post => !action.payload.find(filter => filter.value === post.id)\n            );\n      // return state.filter((post) => post.id !== action.payload)\n    }\n  }\n})\n\nexport const {addNewPost, deletePostConfirm} = postsSlice.actions\n\nexport default postsSlice.reducer","import React, {useState} from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { deletePostDispatched } from '../posts/deletePostSlice';\nimport {deletePostConfirm} from '../posts/postsSlice';\n\nconst PostsList = () => {\n\n  const dispatch = useDispatch()\n  const posts = useSelector(state => state.posts)\n  const deletePost = useSelector(state => state.deletePost)\n  \n  // checkbox checked array \n  const [checkedArray, setCheckedArray] = useState([]);\n\n  const checkBoxClick = (e) => {\n\n    if (e.target.checked === true) { \n      setCheckedArray(prevState => [...prevState, {value:e.target.id}]) \n    } if (e.target.checked === false) {\n      setCheckedArray((prevState) => \n      prevState.filter((id) => id.value !== e.target.id )\n      )\n    }\n  }\n  // remove posts dispatch \n  \n  // const onDeleteConfirm = () => {\n    // console.log('')\n    // if (checkedArray.length>0)  {\n    //   const {value} = checkedArray.value\n    //     const deleteArray = posts.filter((x) => x.id !== value)\n    //     console.log(deleteArray)\n    //   const myArrayFiltered = posts.filter(\n    //     post => checkedArray.some(filter => filter.value === post.id)\n    //     );\n    //     dispatch (\n    //       deletePostConfirm(value)\n    //     )\n      \n  //   } else alert('select a post')\n    \n  // }\n  const onDeleteConfirm = () => {\n    if (checkedArray.length > 0) {\n      dispatch(deletePostConfirm(checkedArray))\n      dispatch (\n        deletePostDispatched(false)\n    )\n    }  else alert('select a post')\n    \n  }\n  // delete post class changes \n\n\n  const closeDeletePost = () => {\n    if (deletePost.value !== false ) {\n        dispatch (\n            deletePostDispatched(false)\n        )\n    }\n   }\n \n\n\n  return (\n    <div >\n      <div className={deletePost.value?'deleteBtnSection' : 'removeDeleteBtnSection ' } >\n        <button className={deletePost.value?'deleteConfirmBtn': 'removeDeleteConfirmBtn'} onClick={onDeleteConfirm} >\n        Delete\n        </button>\n        <button className={deletePost.value?'deleteCancelBtn': 'removeDeleteCancelBtn'} onClick={closeDeletePost} >\n        Cancel\n        </button>\n      </div>\n      \n      <div className=\"postsSection\"  >\n      { posts.map(post => (\n            <div className={deletePost.value? 'eachPost shake' : 'eachPost'} key={post.id}>\n              <h3>{post.name}</h3>\n              <p> {post.description} </p>\n              <div className={deletePost.value? 'showCheckbox' : 'hideCheckbox'} >\n                <label className='checkboxLabel'>\n                  <input className='eachPostCheckbox' type=\"checkbox\" id={post.id} onClick={checkBoxClick}  />\n                  <span className=\"newCheckbox\"></span>\n                </label>\n              </div>\n            </div>\n        )) }\n      </div>\n      \n    </div>\n  )\n}\nexport default PostsList","import React, {useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {addPageClassChanged} from './addPageClassSlice';\nimport { addNewPost } from '../posts/postsSlice';\n\nconst AddPost = () => {\n\n  // close add page dispatch on close button\n\n  const viewAddPage = useSelector(state => state.viewAddPage);\n  const addPageClass = useSelector(state => state.addPageClass.value);\n\n  const dispatch = useDispatch()\n\n  const closeAddPage = () => {\n    if (addPageClass.value !== 'closeAddPage') {\n      dispatch(\n        addPageClassChanged({\n            value: 'closeAddPage'\n        })\n    )\n    }\n  }\n    // close add page dispatch on esc button\n  useEffect(() => {\n    const handleEsc = (event) => {\n       if (event.keyCode === 27) {\n        if (addPageClass.value !== 'closeAddPage') {\n          dispatch(\n            addPageClassChanged({\n                value: 'closeAddPage'\n            })\n        )\n        }\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n  \n  // form input states \n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const onNameChange = (e) => setName(e.target.value)\n  const onDescriptionChange = (e) => setDescription(e.target.value)\n\n  // add new post dispatch \n  const onFormSubmit = (e) => {\n    if (name && description) {\n      dispatch(\n        addNewPost({\n          id: nanoid(),\n          name,\n          description\n        })\n      )\n      setName('')\n      setDescription('')\n    }\n  }\n\n  return (\n    <div className={viewAddPage.value? addPageClass.value : 'closeAddPageInit'} >\n      <div className='addPageHeader' >\n        <h3 className='addPageTitle' >Add Post</h3>\n        <button className='addPageCloseBtn' onClick={closeAddPage} > close x </button>\n      </div>\n      <form className='addForm'  >\n        <label htmlFor=\"postName\">Post:</label>\n        <input className='addFormInputs' type=\"text\" name='postName'\n         placeholder='Go Hiking' onChange={onNameChange} value={name} />\n        <label htmlFor=\"postDescription\">Description:</label>\n        <textarea className='addFormInputs' name=\"postDescription\" id=\"postDescription\" \n        cols=\"30\" rows=\"10\" onChange={onDescriptionChange} value={description}></textarea>\n        <button onClick={onFormSubmit} className='addFormBtn' type='button' >Add Post</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddPost","import './App.css';\nimport React from 'react';\nimport Header from './features/header/Header';\nimport PostsList from './features/posts/PostsList'\nimport AddPost from './features/addPage/AddPost';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <AddPost/>\n      <PostsList/>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport postsReducer from '../features/posts/postsSlice'\nimport viewAddPageReducer from '../features/addPage/addPageClassDispatchInitSlice'\nimport addPageClassReducer from '../features/addPage/addPageClassSlice'\nimport deletePostReducer from '../features/posts/deletePostSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    viewAddPage: viewAddPageReducer,\n    addPageClass: addPageClassReducer,\n    deletePost: deletePostReducer\n  }\n})","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n"],"sourceRoot":""}